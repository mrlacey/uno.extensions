{
  "$schema": "http://json.schemastore.org/template",
  "author": "Uno Platform",
  "classifications": [
    "Multi-platform",
    "Uno Platform",
    "Android",
    "iOS",
    "macOS",
    "Mac Catalyst",
    "Windows",
    "Linux",
    "WebAssembly",
    "WinUI"
  ],
  "name": "Multi-Platform App (Uno.Extensions)",
  "identity": "Uno.Extensions.CSharp",
  "groupIdentity": "Uno.Extensions",
  "description": "Solution template for creating a multi-platform C# & XAML application targeting Windows App SDK, Android, iOS, macOS, WebAssembly, Skia/WPF and Skia/GTK for Linux.",
  "precedence": "6001",
  "tags": {
    "language": "C#",
    "type": "solution"
  },
  "shortName": "unoapp-extensions",
  "sourceName": "MyExtensionsApp",
  "defaultName": "UnoExtApp",
  "placeholderFilename": "template-ignore",
  "preferNameDirectory": true,
  "guids": [
    "C7433AE2-B1A0-4C1A-887E-5CAA7AAF67A6", // Solution file (SolutionGuid)
    "FAA2C1DE-F859-4053-9573-6245F7E832EF", // src solution folder
    "BACDD33A-304C-46C4-9B00-AC166978D7E0", // (core) library
    "339C569C-EE23-445E-B908-743673EE5BC9", // Platforms solution folder
    "BA1ACE40-623E-4F42-94BB-11CF4D52C445", // Web solution folder
    "24D56E12-2373-4CBD-9AD4-5C931D15FB0D", // Mobile
    "40EA03F7-8A22-4143-B251-79BAC3EB13D2", // Wasm
    "A5B8155A-118F-4794-B551-C6F3CF7E5411", // Skia.Gtk
    "6C744695-DA38-44D9-B487-FE5804C5508D", // Skia.WPF
    "5A78EE9A-1922-468C-96E3-45817727511C", // Windows
    "925C7A3E-6532-4E27-8ABE-37A4F9B73C8B", // Skia.Linux.FrameBuffer
    "1ADD4B1D-2758-4ED5-963A-FE3F4206BF20", // Server
    "7EF70027-9874-4112-A14F-33F02169CF8A", // Tests Solution folder
    "EB3EB846-D5CB-4140-834F-1CC40A0FD6D0", // Tests
    "7229D034-7DBE-4FD7-B0E4-38D617571F93", // UITests
    "E2821155-50B7-468D-A15B-E0EAF55DAC2B", // WINDOWS - Package.appxmanifest Identity.Name
    "F5EAE47C-F7DF-4D61-8A30-92251720AC4B", // Mobile Application Id
    "5ED31500-DF01-462D-9436-EC2EDCAA1965" // DataContracts
  ],
  "symbols": {
    "preset": {
      "displayName": "Preset",
      "type": "parameter",
      "datatype": "choice",
      "defaultValue": "recommended",
      "description": "Selects whether to use the recommended Extensions Template or Blank App",
      "choices": [
        {
          "choice": "recommended",
          "description": "An extended template for creating a multi-platform application with the Uno Platform",
          "displayName": "Default"
        },
        {
          "choice": "blank",
          "description": "A template for creating a multi-platform application with the Uno Platform",
          "displayName": "Blank"
        }
      ]
    },
    "appId": {
      "displayName": "Application ID",
      "type": "parameter",
      "datatype": "string",
      "replaces": "com.companyname.myextensionsapp",
      "description": "The application identifier (e.g. com.mycompany.myapp)",
      "defaultValue": "com.companyname.myextensionsapp"
    },
    "tfm": {
      "displayName": "Framework",
      "type": "parameter",
      "datatype": "choice",
      "enableQuotelessLiterals": true,
      "replaces": "$baseTargetFramework$",
      "defaultValue": "net7.0",
      "description": "Target Framework",
      "choices": [
        {
          "choice": "net6.0",
          "displayName": ".NET 6.0",
          "description": "Target .NET 6.0 (Long Term Support)"
        },
        {
          "choice": "net7.0",
          "displayName": ".NET 7.0",
          "description": "Target .NET 7.0 (Standard Term Support)"
        },
        {
          "choice": "net8.0",
          "displayName": ".NET 8.0",
          "description": "Target .NET 8.0 (Preview)"
        }
      ]
    },
    "architecture": {
      "displayName": "Presentation",
      "description": "Selects either MVVM or MVU-X for the design architecture.",
      "type": "parameter",
      "datatype": "choice",
      "defaultValue": "mvux",
      "choices": [
        {
          "choice": "mvvm",
          "description": "Use the Model-View-ViewModel (MVVM) design pattern",
          "displayName": "MVVM"
        },
        {
          "choice": "mvux",
          "description": "Use the Model-View-Update eXtended (MVU-X) design pattern",
          "displayName": "MVU-X"
        }
      ]
    },
    "markup": {
      "displayName": "UI Markup",
      "description": "Selects either XAML or C# Markup for the UI.",
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "xaml",
          "description": "Use XAML for the UI",
          "displayName": "XAML"
        },
        {
          "choice": "csharp",
          "description": "Use C# Markup for the UI",
          "displayName": "C# Markup"
        }
      ],
      "defaultValue": "xaml"
    },
    "appTheme": {
      "displayName": "Theme",
      "description": "Selects the theme design system for the application.",
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "material",
          "description": "Use the Material design theme",
          "displayName": "Material"
        },
        {
          "choice": "fluent",
          "description": "Use the Fluent design theme",
          "displayName": "Fluent"
        },
        {
          "choice": "cupertino",
          "description": "Use the Cupertino design theme",
          "displayName": "Cupertino"
        }
      ],
      "defaultValue": "material"
    },
    "platforms": {
      "displayName": "Platforms",
      "description": "Selects the platforms to target.",
      "type": "parameter",
      "datatype": "choice",
      "enableQuotelessLiterals": true,
      "allowMultipleValues": true,
      "defaultValue": "android|ios|maccatalyst|wasm|windows|wpf|gtk|linux-fb",
      "choices": [
        {
          "choice": "android",
          "displayName": "Android"
        },
        {
          "choice": "ios",
          "displayName": "iOS"
        },
        {
          "choice": "maccatalyst",
          "displayName": "macOS (Catalyst)"
        },
        {
          "choice": "macos",
          "displayName": "macOS (AppKit)"
        },
        {
          "choice": "windows",
          "displayName": "Windows"
        },
        {
          "choice": "wasm",
          "displayName": "WebAssembly"
        },
        {
          "choice": "gtk",
          "displayName": "GTK"
        },
        {
          "choice": "wpf",
          "displayName": "WPF"
        },
        {
          "choice": "linux-fb",
          "displayName": "Linux Framebuffer"
        }
      ]
    },
    "tests": {
      "displayName": "Tests",
      "type": "parameter",
      "datatype": "choice",
      "allowMultipleValues": true,
      "enableQuotelessLiterals": true,
      "choices": [
        {
          "choice": "unit",
          "description": "Include a Unit test project",
          "displayName": "Unit Tests"
        },
        {
          "choice": "ui",
          "description": "Include a UI test project",
          "displayName": "UI Tests"
        }
      ],
      "defaultValue": "unit|ui"
    },
    "server": {
      "displayName": "Server - API",
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "description": "Includes a Server project for an API & host for the WebAssembly project"
    },
    "dependencyInjection": {
      "displayName": "Dependency Injection",
      "description": "Use dependency injection for registering and accessing services",
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true"
    },
    "configuration": {
      "displayName": "Configuration",
      "description": "Load configuration information from appsettings.json",
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true"
    },
    "http": {
      "displayName": "HTTP",
      "description": "Register native handlers for http and setup Refit support",
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true"
    },
    "localization": {
      "displayName": "Localization",
      "description": "Configures support for localizing resources throughout the application",
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true"
    },
    "cultures": {
      "displayName": "Locales",
      "description": "Adds support for additional locales",
      "type": "parameter",
      "datatype": "choice",
      "allowMultipleValues": true,
      "defaultValue": "es|fr|pt-BR",
      "choices": [
        {
          "choice": "ar",
          "description": "Arabic",
          "displayName": "Arabic"
        },
        {
          "choice": "cs",
          "description": "Czech",
          "displayName": "Czech"
        },
        {
          "choice": "da",
          "description": "Danish",
          "displayName": "Danish"
        },
        {
          "choice": "nl",
          "description": "Dutch",
          "displayName": "Dutch"
        },
        {
          "choice": "fr",
          "description": "French",
          "displayName": "French"
        },
        {
          "choice": "de",
          "description": "German",
          "displayName": "German"
        },
        {
          "choice": "es",
          "description": "Spanish",
          "displayName": "Spanish"
        },
        {
          "choice": "it",
          "description": "Italian",
          "displayName": "Italian"
        },
        {
          "choice": "ja",
          "description": "Japanese",
          "displayName": "Japanese"
        },
        {
          "choice": "ko",
          "description": "Korean",
          "displayName": "Korean"
        },
        {
          "choice": "pt-BR",
          "description": "Portuguese (Brazil)",
          "displayName": "Portuguese (Brazil)"
        },
        {
          "choice": "ru",
          "description": "Russian",
          "displayName": "Russian"
        },
        {
          "choice": "sv",
          "description": "Swedish",
          "displayName": "Swedish"
        },
        {
          "choice": "tr",
          "description": "Turkish",
          "displayName": "Turkish"
        },
        {
          "choice": "uk",
          "description": "Ukrainian",
          "displayName": "Ukrainian"
        },
        {
          "choice": "vi",
          "description": "Vietnamese",
          "displayName": "Vietnamese"
        },
        {
          "choice": "zh-Hans",
          "description": "Chinese (Simplified)",
          "displayName": "Chinese (Simplified)"
        },
        {
          "choice": "zh-Hant",
          "description": "Chinese (Traditional)",
          "displayName": "Chinese (Traditional)"
        }
      ]
    },
    "logging": {
      "displayName": "Logging",
      "description": "Configures logging support in the application",
      "type": "parameter",
      "datatype": "choice",
      "defaultValue": "serilog",
      "choices": [
        {
          "choice": "none",
          "description": "Debug Logging for the Application Framework to the Console",
          "displayName": "Console"
        },
        {
          "choice": "default",
          "description": "Logging is accessible via dependency injection and writes output to Console",
          "displayName": "Default"
        },
        {
          "choice": "serilog",
          "description": "Logging is accesible via dependency injection and configured to use Serilog",
          "displayName": "Serilog"
        }
      ]
    },
    "navigation": {
      "displayName": "Navigation",
      "description": "Configures navigation in the application",
      "type": "parameter",
      "datatype": "choice",
      "choices": [
        {
          "choice": "default",
          "displayName": "Default",
          "description": "Provides a simple 2 page sample with a Splash Screen"
        },
        {
          "choice": "frame",
          "displayName": "Frame",
          "description": "Uses the Frame control for navigation"
        }
      ],
      "defaultValue": "default"
    },
    "cpm": {
      "displayName": "Central Package Management",
      "type": "parameter",
      "dataType": "bool",
      "defaultValue": "false",
      "description": "Use Central Package Management where package versions are via central Directory.Packages.props file"
    },
    "vscode": {
      "displayName": "Visual Studio Code Debugging",
      "type": "parameter",
      "dataType": "bool",
      "defaultValue": "true",
      "description": "Adds the Visual Studio Code Debugging support files for WebAssembly and Skia Gtk"
    },
    "wasmPwaManifest": {
      "displayName": "PWA Manifest",
      "description": "Includes a PWA manifest for WebAssembly",
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true"
    },
    "skipRestore": {
      "type": "parameter",
      "datatype": "bool",
      "displayName": "Skip Restore",
      "description": "If specified, skips the automatic restore of the project on create.",
      "defaultValue": "false"
    },
    "isVsix": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "description": "Supplied by Uno Studio"
    },
    "useCPM": {
      "type": "computed",
      "datatype": "bool",
      "value": "cpm"
    },
    "useBlankAppTemplate": {
      "type": "computed",
      "datatype": "bool",
      "value": "preset == 'blank'"
    },
    "useRecommendedAppTemplate": {
      "type": "computed",
      "datatype": "bool",
      "value": "preset == 'recommended'"
    },
    "useTestSolutionFolder": {
      "type": "computed",
      "datatype": "bool",
      "value": "preset == 'recommended' && (tests == 'ui' || tests == 'unit')"
    },
    "useCsharpMarkup": {
      "type": "computed",
      "datatype": "bool",
      "value": "(markup == 'csharp')"
    },
    "useXaml": {
      "type": "computed",
      "datatype": "bool",
      "value": "(markup == 'xaml')"
    },
    "useToolkit": {
      "type": "computed",
      "datatype": "bool",
      "value": "useRecommendedAppTemplate"
    },
    "useMaterial": {
      "type": "computed",
      "datatype": "bool",
      "value": "(appTheme == 'material' && preset == 'recommended')"
    },
    "useFluent": {
      "type": "computed",
      "datatype": "bool",
      "value": "(appTheme == 'fluent' && preset == 'recommended')"
    },
    "useCupertino": {
      "type": "computed",
      "datatype": "bool",
      "value": "(appTheme == 'cupertino' && preset == 'recommended')"
    },
    "useLoggingFallback": {
      "type": "computed",
      "datatype": "bool",
      "value": "(logging == 'none' || preset == 'blank')"
    },
    "useLogging": {
      "type": "computed",
      "datatype": "bool",
      "value": "(useDependencyInjection && logging != 'none')"
    },
    "useSerilog": {
      "type": "computed",
      "datatype": "bool",
      "value": "(useDependencyInjection && logging == 'serilog')"
    },
    "useAspNetCoreSerilogPackage": {
      "type": "computed",
      "datatype": "bool",
      "value": "(server && useSerilog)"
    },
    "useMvux": {
      "type": "computed",
      "datatype": "bool",
      "value": "architecture == 'mvux'"
    },
    "useMvvm": {
      "type": "computed",
      "datatype": "bool",
      "value": "architecture == 'mvvm'"
    },
    "useGtk": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == gtk)"
    },
    "useLinuxFb": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == linux-fb)"
    },
    "useAndroid": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == android)"
    },
    "useIOS": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == ios)"
    },
    "useMacOS": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == macos)"
    },
    "useMacCatalyst": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == maccatalyst)"
    },
    "useMobile": {
      "type": "computed",
      "dataType": "bool",
      "value": "(platforms == android || platforms == ios || platforms == macos || platforms == maccatalyst)"
    },
    "useWasm": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == wasm)"
    },
    "useWinAppSdk": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == windows)"
    },
    "useWpf": {
      "type": "computed",
      "datatype": "bool",
      "value": "(platforms == wpf)"
    },
    "useDataContracts": {
      "type": "computed",
      "dataType": "bool",
      "value": "(preset == 'recommended' && ((useDependencyInjection && http) || server))"
    },
    "useUnitTests": {
      "type": "computed",
      "dataType": "bool",
      "value": "(preset == 'recommended' &&  tests == unit)"
    },
    "useUITests": {
      "type": "computed",
      "dataType": "bool",
      "value": "(preset == 'recommended' && tests == ui)"
    },
    "useDependencyInjection": {
      "type": "computed",
      "dataType": "bool",
      "value": "(dependencyInjection && preset == 'recommended')"
    },
    "useConfiguration": {
      "type": "computed",
      "dataType": "bool",
      "value": "(useDependencyInjection && configuration)"
    },
    "useHttp": {
      "type": "computed",
      "dataType": "bool",
      "value": "(http && useConfiguration)"
    },
    "useLocalization": {
      "type": "computed",
      "dataType": "bool",
      "value": "(localization && useConfiguration)"
    },
    "useArabic": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'ar'"
    },
    "useCzech": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'cs'"
    },
    "useDanish": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'da'"
    },
    "useDutch": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'nl'"
    },
    "useFrench": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'fr'"
    },
    "useGerman": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'de'"
    },
    "useSpanish": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'es'"
    },
    "useItalian": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'it'"
    },
    "useJapanese": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'ja'"
    },
    "useKorean": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'ko'"
    },
    "usePortuguese": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'pt-BR'"
    },
    "useRussian": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'ru'"
    },
    "useSwedish": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'sv'"
    },
    "useTurkish": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'tr'"
    },
    "useUkrainian": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'uk'"
    },
    "useVietnamese": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'vi'"
    },
    "useChineseSimplified": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'zh-Hans'"
    },
    "useChineseTraditional": {
      "type": "computed",
      "datatype": "bool",
      "value": "cultures == 'zh-Hant'"
    },
    "includeIsExternalInit": {
      "type": "computed",
      "dataType": "bool",
      "value": "(tfm == 'net6.0')"
    },
    "langVersion": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$langVersion$",
      "parameters": {
        "evaluator": "C++",
        "datatype": "string",
        "cases": [
          {
            "condition": "(tfm == 'net6.0')",
            "value": "10"
          },
          {
            "condition": "(tfm == 'net7.0')",
            "value": "11"
          },
          {
            "condition": "(tfm == 'net8.0')",
            "value": "12"
          }
        ]
      }
    },
    "libraryBaseTargetFramework": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$libraryBaseTargetFramework$",
      "parameters": {
        "evaluator": "C++",
        "datatype": "string",
        "cases": [
          {
            "condition": "(tfm == 'net6.0')",
            "value": "netstandard2.1"
          },
          {
            "condition": "(tfm == 'net7.0')",
            "value": "net7.0"
          },
          {
            "condition": "(tfm == 'net8.0')",
            "value": "net8.0"
          }
        ]
      }
    },
    "mobileTargetFrameworks": {
      "type": "generated",
      "generator": "switch",
      "replaces": "$mobileTargetFrameworks$",
      "parameters": {
        "evaluator": "C++",
        "datatype": "string",
        "cases": [
          {
            "condition": "(tfm == 'net6.0' && platforms == android && platforms == ios && platforms == maccatalyst)",
            "value": "net6.0-ios;net6.0-android;net6.0-maccatalyst"
          },
          {
            "condition": "(tfm == 'net7.0' && platforms == android && platforms == ios && platforms == maccatalyst)",
            "value": "net7.0-ios;net7.0-android;net7.0-maccatalyst"
          },
          {
            "condition": "(tfm == 'net8.0' && platforms == android && platforms == ios && platforms == maccatalyst)",
            "value": "net8.0-ios;net8.0-android;net8.0-maccatalyst"
          },
          {
            "condition": "(tfm == 'net6.0' && platforms == android && platforms == ios && platforms != maccatalyst)",
            "value": "net6.0-ios;net6.0-android"
          },
          {
            "condition": "(tfm == 'net7.0' && platforms == android && platforms == ios && platforms != maccatalyst)",
            "value": "net7.0-ios;net7.0-android"
          },
          {
            "condition": "(tfm == 'net8.0' && platforms == android && platforms == ios && platforms != maccatalyst)",
            "value": "net8.0-ios;net8.0-android"
          },
          {
            "condition": "(tfm == 'net6.0' && platforms != android && platforms == ios && platforms == maccatalyst)",
            "value": "net6.0-ios;net6.0-maccatalyst"
          },
          {
            "condition": "(tfm == 'net7.0' && platforms != android && platforms == ios && platforms == maccatalyst)",
            "value": "net7.0-ios;net7.0-maccatalyst"
          },
          {
            "condition": "(tfm == 'net8.0' && platforms != android && platforms == ios && platforms == maccatalyst)",
            "value": "net8.0-ios;net8.0-maccatalyst"
          },
          {
            "condition": "(tfm == 'net6.0' && platforms == android && platforms != ios && platforms == maccatalyst)",
            "value": "net6.0-android;net6.0-maccatalyst"
          },
          {
            "condition": "(tfm == 'net7.0' && platforms == android && platforms != ios && platforms == maccatalyst)",
            "value": "net7.0-android;net7.0-maccatalyst"
          },
          {
            "condition": "(tfm == 'net8.0' && platforms == android && platforms != ios && platforms == maccatalyst)",
            "value": "net8.0-android;net8.0-maccatalyst"
          },
          {
            "condition": "(tfm == 'net6.0' && platforms == android && platforms != ios && platforms != maccatalyst)",
            "value": "net6.0-android"
          },
          {
            "condition": "(tfm == 'net7.0' && platforms == android && platforms != ios && platforms != maccatalyst)",
            "value": "net7.0-android"
          },
          {
            "condition": "(tfm == 'net8.0' && platforms == android && platforms != ios && platforms != maccatalyst)",
            "value": "net8.0-android"
          },
          {
            "condition": "(tfm == 'net6.0' && platforms != android && platforms == ios && platforms != maccatalyst)",
            "value": "net6.0-ios"
          },
          {
            "condition": "(tfm == 'net7.0' && platforms != android && platforms == ios && platforms != maccatalyst)",
            "value": "net7.0-ios"
          },
          {
            "condition": "(tfm == 'net8.0' && platforms != android && platforms == ios && platforms != maccatalyst)",
            "value": "net8.0-ios"
          },
          {
            "condition": "(tfm == 'net6.0' && platforms != android && platforms != ios && platforms == maccatalyst)",
            "value": "net6.0-maccatalyst"
          },
          {
            "condition": "(tfm == 'net7.0' && platforms != android && platforms != ios && platforms == maccatalyst)",
            "value": "net7.0-maccatalyst"
          },
          {
            "condition": "(tfm == 'net8.0' && platforms != android && platforms != ios && platforms == maccatalyst)",
            "value": "net8.0-maccatalyst"
          },
          {
            "condition": "(platforms != android && platforms != ios && platforms != maccatalyst)",
            "value": ""
          }
        ]
      }
    },
    "mainDataContext":{
      "type": "generated",
      "generator": "switch",
      "replaces": "$mainDataContext$",
      "parameters": {
        "cases": [
          {
            "condition": "(architecture == 'mvux')",
            "value": "BindableMainModel"
          },
          {
            "condition": "(architecture == 'mvvm')",
            "value": "MainViewModel"
          }
        ]
      }
    },
    "secondDataContext":{
      "type": "generated",
      "generator": "switch",
      "replaces": "$secondDataContext$",
      "parameters": {
        "cases": [
          {
            "condition": "(architecture == 'mvux')",
            "value": "BindableSecondModel"
          },
          {
            "condition": "(architecture == 'mvvm')",
            "value": "SecondViewModel"
          }
        ]
      }
    },
    "useExtensionsNavigation": {
      "type": "computed",
      "datatype": "bool",
      "value": "useDependencyInjection && navigation != 'frame'"
    },
    "useReactiveExtensionsNavigation": {
      "type": "computed",
      "datatype": "bool",
      "value": "useExtensionsNavigation && useMvux"
    },
    "useDefaultNav": {
      "type": "computed",
      "datatype": "bool",
      "value": "useExtensionsNavigation && navigation == 'default'"
    },
    "useDefaultNavMvux": {
      "type": "computed",
      "datatype": "bool",
      "value": "useDefaultNav && useMvux"
    },
    "useDefaultNavMvvm": {
      "type": "computed",
      "datatype": "bool",
      "value": "useDefaultNav && useMvvm"
    },
    "useFrameNav": {
      "type": "computed",
      "datatype": "bool",
      "value": "preset  == 'blank' || !useDependencyInjection || navigation == 'frame'"
    },
    "useInfrastructureNamespace": {
      "type": "computed",
      "datatype": "bool",
      "value": "preset == 'recommended' && http && dependencyInjection"
    },
    "useBusinessModelsNamespace": {
      "type": "computed",
      "datatype": "bool",
      "value": "preset == 'recommended' && dependencyInjection && (configuration || navigation != 'frame')"
    },
    "HostIdentifier": {
      "type": "bind",
      "binding": "HostIdentifier"
    }
  },
  "primaryOutputs": [
    {
      "condition": "!isVsix",
      "path": "MyExtensionsApp.sln"
    },
    {
      "path": "MyExtensionsApp\\MyExtensionsApp.csproj"
    },
    {
      "condition": "server",
      "path": "MyExtensionsApp.Server\\MyExtensionsApp.Server.csproj"
    },
    {
      "condition": "server || (http && useRecommendedAppTemplate)",
      "path": "MyExtensionsApp.DataContracts\\MyExtensionsApp.DataContracts.csproj"
    },
    {
      "condition": "useUnitTests",
      "path": "MyExtensionsApp.Tests\\MyExtensionsApp.Tests.csproj"
    },
    {
      "condition": "useUITests",
      "path": "MyExtensionsApp.UITests\\MyExtensionsApp.UITests.csproj"
    },
    {
      "condition": "cpm",
      "path": "Directory.Packages.props"
    },
    {
      "condition": "useMobile",
      "path": "MyExtensionsApp.Mobile\\MyExtensionsApp.Mobile.csproj"
    },
    {
      "condition": "useWinAppSdk",
      "path": "MyExtensionsApp.Windows\\MyExtensionsApp.Windows.csproj"
    },
    {
      "condition": "useWasm",
      "path": "MyExtensionsApp.Wasm\\MyExtensionsApp.Wasm.csproj"
    },
    {
      "condition": "useGtk",
      "path": "MyExtensionsApp.Skia.Gtk\\MyExtensionsApp.Skia.Gtk.csproj"
    },
    {
      "condition": "useWpf",
      "path": "MyExtensionsApp.Skia.WPF\\MyExtensionsApp.Skia.Wpf.csproj"
    },
    {
      "condition": "useLinuxFb",
      "path": "MyExtensionsApp.Skia.Linux.FrameBuffer\\MyExtensionsApp.Skia.Linux.FrameBuffer.csproj"
    }
  ],
  "sources": [
    {
      "modifiers": [
        {
          "copyOnly": [
            "**/*.png",
            "**/*.jpg",
            "**/*.gif",
            "**/*.woff",
            "**/*.ttf"
          ],
          "exclude": [
            "MyExtensionsApp.Debugging.sln"
          ]
        },
        {
          "condition": "(!includeIsExternalInit)",
          "exclude": [
            "**/IsExternalInit.cs"
          ]
        },
        {
          "condition": "(platforms != android)",
          "exclude": [
            "MyExtensionsApp.Mobile/Android/**/*"
          ]
        },
        {
          "condition": "(platforms != ios)",
          "exclude": [
            "MyExtensionsApp.Mobile/iOS/**/*"
          ]
        },
        {
          "condition": "(platforms != macos)",
          "exclude": [
            "MyExtensionsApp.Mobile/macOS/**/*"
          ]
        },
        {
          "condition": "(platforms != maccatalyst)",
          "exclude": [
            "MyExtensionsApp.Mobile/MacCatalyst/**/*"
          ]
        },
        {
          "condition": "(!useMobile)",
          "exclude": [
            "MyExtensionsApp.Mobile/**/*"
          ]
        },
        {
          "condition": "(!useWasm)",
          "exclude": [
            "MyExtensionsApp.Wasm**/*"
          ]
        },
        {
          "condition": "(!useGtk)",
          "exclude": [
            "MyExtensionsApp.Skia.Gtk/**/*"
          ]
        },
        {
          "condition": "(!useWpf)",
          "exclude": [
            "MyExtensionsApp.Skia.WPF/**/*"
          ]
        },
        {
          "condition": "(!useLinuxFb)",
          "exclude": [
            "MyExtensionsApp.Skia.Linux.FrameBuffer/**/*"
          ]
        },
        {
          "condition": "(useWinAppSdk && useGtk)",
          "exclude": [
            "MyExtensionsApp.Skia.Gtk/Package.appxmanifest"
          ]
        },
        {
          "condition": "(useWinAppSdk && useLinuxFb)",
          "exclude": [
            "MyExtensionsApp.Skia.Linux.FrameBuffer/Package.appxmanifest"
          ]
        },
        {
          "condition": "(!useWinAppSdk)",
          "exclude": [
            "MyExtensionsApp.Windows/**/*"
          ]
        },
        {
          "condition": "(!server)",
          "exclude": [
            "MyExtensionsApp.Server/**/*"
          ]
        },
        {
          "condition": "(useDependencyInjection)",
          "exclude": [
            "MyExtensionsApp/App.blank.cs"
          ],
          "rename": {
            "MyExtensionsApp/App.recommended.cs": "MyExtensionsApp/App.cs"
          }
        },
        {
          "condition": "(!useDependencyInjection)",
          "exclude": [
            "MyExtensionsApp/App.recommended.cs",
            "MyExtensionsApp/Infrastructure/DebugHandler.cs",
            "MyExtensionsApp/Business/**",
            "MyExtensionsApp/Presentation/**"
          ],
          "rename": {
            "MyExtensionsApp/App.blank.cs": "MyExtensionsApp/App.cs"
          }
        },
        {
          "condition": "(useRecommendedAppTemplate)",
          "exclude": [
            "MyExtensionsApp.Server/WeatherForecast.cs"
          ]
        },
        {
          "condition": "(useBlankAppTemplate || (!useHttp && !server))",
          "exclude": [
            "MyExtensionsApp.DataContracts/**/*"
          ]
        },
        {
          "condition": "(useMvvm)",
          "exclude": [
            "MyExtensionsApp/Presentation/MainModel.cs",
            "MyExtensionsApp/Presentation/SecondModel.cs",
            "MyExtensionsApp/Presentation/ShellModel.cs"
          ]
        },
        {
          "condition": "(useMvux)",
          "exclude": [
            "MyExtensionsApp/Presentation/MainViewModel.cs",
            "MyExtensionsApp/Presentation/SecondViewModel.cs",
            "MyExtensionsApp/Presentation/ShellViewModel.cs"
          ]
        },
        {
          "condition": "(!useLocalization)",
          "exclude": [
            "MyExtensionsApp/Strings/ar/*",
            "MyExtensionsApp/Strings/cs/*",
            "MyExtensionsApp/Strings/da/*",
            "MyExtensionsApp/Strings/de/*",
            "MyExtensionsApp/Strings/es/*",
            "MyExtensionsApp/Strings/fr/*",
            "MyExtensionsApp/Strings/it/*",
            "MyExtensionsApp/Strings/ja/*",
            "MyExtensionsApp/Strings/ko/*",
            "MyExtensionsApp/Strings/nl/*",
            "MyExtensionsApp/Strings/pt-BR/*",
            "MyExtensionsApp/Strings/ru/*",
            "MyExtensionsApp/Strings/sv/*",
            "MyExtensionsApp/Strings/tr/*",
            "MyExtensionsApp/Strings/uk/*",
            "MyExtensionsApp/Strings/vi/*",
            "MyExtensionsApp/Strings/zh-Hans/*",
            "MyExtensionsApp/Strings/zh-Hant/*"
          ]
        },
        {
          "condition": "(!useArabic)",
          "exclude": [
            "MyExtensionsApp/Strings/ar/*"
          ]
        },
        {
          "condition": "(!useCzech)",
          "exclude": [
            "MyExtensionsApp/Strings/cs/*"
          ]
        },
        {
          "condition": "(!useDanish)",
          "exclude": [
            "MyExtensionsApp/Strings/da/*"
          ]
        },
        {
          "condition": "(!useGerman)",
          "exclude": [
            "MyExtensionsApp/Strings/de/*"
          ]
        },
        {
          "condition": "(!useSpanish)",
          "exclude": [
            "MyExtensionsApp/Strings/es/*"
          ]
        },
        {
          "condition": "(!useFrench)",
          "exclude": [
            "MyExtensionsApp/Strings/fr/*"
          ]
        },
        {
          "condition": "(!useItalian)",
          "exclude": [
            "MyExtensionsApp/Strings/it/*"
          ]
        },
        {
          "condition": "(!useJapanese)",
          "exclude": [
            "MyExtensionsApp/Strings/ja/*"
          ]
        },
        {
          "condition": "(!useKorean)",
          "exclude": [
            "MyExtensionsApp/Strings/ko/*"
          ]
        },
        {
          "condition": "(!useDutch)",
          "exclude": [
            "MyExtensionsApp/Strings/nl/*"
          ]
        },
        {
          "condition": "(!usePortuguese)",
          "exclude": [
            "MyExtensionsApp/Strings/pt-BR/*"
          ]
        },
        {
          "condition": "(!useRussian)",
          "exclude": [
            "MyExtensionsApp/Strings/ru/*"
          ]
        },
        {
          "condition": "(!useSwedish)",
          "exclude": [
            "MyExtensionsApp/Strings/sv/*"
          ]
        },
        {
          "condition": "(!useTurkish)",
          "exclude": [
            "MyExtensionsApp/Strings/tr/*"
          ]
        },
        {
          "condition": "(!useUkrainian)",
          "exclude": [
            "MyExtensionsApp/Strings/uk/*"
          ]
        },
        {
          "condition": "(!useVietnamese)",
          "exclude": [
            "MyExtensionsApp/Strings/vi/*"
          ]
        },
        {
          "condition": "(!useChineseSimplified)",
          "exclude": [
            "MyExtensionsApp/Strings/zh-Hans/*"
          ]
        },
        {
          "condition": "(!useChineseTraditional)",
          "exclude": [
            "MyExtensionsApp/Strings/zh-Hant/*"
          ]
        },
        {
          "condition": "(!useHttp)",
          "exclude": [
            "MyExtensionsApp/Services/IApiClient.cs"
          ]
        },
        {
          "condition": "(!useUnitTests)",
          "exclude": [
            "MyExtensionsApp.Tests/**/*"
          ]
        },
        {
          "condition": "(!useUITests)",
          "exclude": [
            "MyExtensionsApp.UITests/**/*"
          ]
        },
        {
          "condition": "(!cpm)",
          "exclude": [
            "Directory.Packages.props"
          ]
        },
        {
          "condition": "(!vscode)",
          "exclude": [
            ".vscode/**/*"
          ]
        },
        {
          "condition": "(!wasmPwaManifest)",
          "exclude": [
            "MyExtensionsApp.Wasm/manifest.json",
            "MyExtensionsApp.Wasm/Assets/AppIcon-*"
          ]
        },
        {
          "condition": "(!useCsharpMarkup)",
          "exclude": [
            "MyExtensionsApp/AppResources.cs",
            "MyExtensionsApp/Styles/*.cs"
          ]
        },
        {
          "condition": "(useCsharpMarkup)",
          "exclude": [
            "MyExtensionsApp/**/*.xaml"
          ],
          "rename": {
            "MyExtensionsApp/MainPage.xaml.cs": "MyExtensionsApp/MainPage.cs",
            "MyExtensionsApp/Presentation/MainPage.xaml.cs": "MyExtensionsApp/Presentation/MainPage.cs",
            "MyExtensionsApp/Presentation/SecondPage.xaml.cs": "MyExtensionsApp/Presentation/SecondPage.cs",
            "MyExtensionsApp/Presentation/Shell.xaml.cs": "MyExtensionsApp/Presentation/Shell.cs"
          }
        },
        {
          "condition": "(useBlankAppTemplate)",
          "rename": {
            "MyExtensionsApp/App.blank.cs": "MyExtensionsApp/App.cs"
          },
          "exclude": [
            "MyExtensionsApp/Business/**",
            "MyExtensionsApp/Infrastructure/**",
            "MyExtensionsApp/Presentation/**",
            "MyExtensionsApp/Services/**",
            "MyExtensionsApp/Styles/**",
            "MyExtensionsApp/App.recommended.cs",
            "MyExtensionsApp/appsettings.*",
            "MyExtensionsApp.Tests/AppInfoTests.cs"
          ]
        },
        {
          "condition": "(!useConfiguration)",
          "exclude": [
            "MyExtensionsApp.Tests/AppInfoTests.cs"
          ]
        },
        {
          "condition": "(useConfiguration)",
          "exclude": [
            "MyExtensionsApp.Tests/UnitTest1.cs"
          ]
        },
        {
          "condition": "(useBlankAppTemplate || useFrameNav)",
          "exclude": [
            "MyExtensionsApp/Presentation/**"
          ]
        },
        {
          "condition": "(useRecommendedAppTemplate && useExtensionsNavigation && useDependencyInjection)",
          "exclude": [
            "MyExtensionsApp/MainPage.xaml",
            "MyExtensionsApp/MainPage.xaml.cs"
          ]
        },
        {
          "condition": "(!configuration)",
          "exclude": [
            "MyExtensionsApp/Business/Models/AppConfig.cs"
          ]
        },
        {
          "condition": "(!useConfiguration)",
          "exclude": [
            "MyExtensionsApp/appsettings.*"
          ]
        }
      ]
    }
  ],
  "postActions": [
    {
      "id": "nugetRestore",
      "condition": "(!skipRestore)",
      "description": "Restore NuGet packages required by this project",
      "manualInstructions": [
        {
          "text": "Run 'dotnet restore'"
        }
      ],
      "actionId": "210D431B-A78B-4D2F-B762-4ED3E3EA9025",
      "continueOnError": true
    }
  ]
}
